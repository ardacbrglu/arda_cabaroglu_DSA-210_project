code so far: 
import os
import pandas as pd
import matplotlib.pyplot as plt
from bs4 import BeautifulSoup

# Step 1: Specify the updated file path
file_path = r"C:\Users\Cabaroglu\Desktop\apple_health_export\health_data.xml"

# Step 2: Check if the file exists
if not os.path.exists(file_path):
    raise FileNotFoundError(f"File not found at: {file_path}. Please check the path and try again.")

# Step 3: Parse the XML file
print(f"Parsing the file: {file_path}")
with open(file_path, "r", encoding="utf-8") as file:
    content = file.read()

# Parse the XML content
soup = BeautifulSoup(content, "xml")

# Step 4: Extract Active Energy and Step Count Data
records = []
for record in soup.find_all("Record"):
    try:
        record_type = record.get("type")
        start_date = record.get("startDate")
        value = float(record.get("value")) if record.get("value") else None
        if record_type and start_date and value is not None:
            if record_type in ["HKQuantityTypeIdentifierStepCount", "HKQuantityTypeIdentifierActiveEnergyBurned"]:
                records.append({"type": record_type, "date": start_date, "value": value})
    except (AttributeError, ValueError):
        continue

# Step 5: Convert to DataFrame
df = pd.DataFrame(records)

# Convert 'date' to datetime
df["date"] = pd.to_datetime(df["date"], errors="coerce")
df.dropna(subset=["date"], inplace=True)

# Separate data into Active Energy and Step Count
active_energy_df = df[df["type"] == "HKQuantityTypeIdentifierActiveEnergyBurned"]
step_count_df = df[df["type"] == "HKQuantityTypeIdentifierStepCount"]

# Aggregate data by date
active_energy_per_day = active_energy_df.groupby(active_energy_df["date"].dt.date)["value"].sum()
step_count_per_day = step_count_df.groupby(step_count_df["date"].dt.date)["value"].sum()

# Step 6: Visualization

# Active Energy Graph
plt.figure(figsize=(12, 6))
plt.plot(active_energy_per_day.index, active_energy_per_day.values, marker='o', color='orange', label="Active Energy")
plt.title("Daily Active Energy (Calories Burned)")
plt.xlabel("Date")
plt.ylabel("Calories Burned")
plt.xticks(rotation=45)
plt.grid(True)
plt.tight_layout()
plt.legend()
plt.show()

# Step Count Graph
plt.figure(figsize=(12, 6))
plt.plot(step_count_per_day.index, step_count_per_day.values, marker='o', color='blue', label="Step Count")
plt.title("Daily Step Count")
plt.xlabel("Date")
plt.ylabel("Steps")
plt.xticks(rotation=45)
plt.grid(True)
plt.tight_layout()
plt.legend()
plt.show()
